Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from math import factorial

# Define the smooth but non-analytic function
def f(x):
    out = np.zeros_like(x)
    nonzero = x != 0
    out[nonzero] = np.exp(-1 / x[nonzero]**2)
    return out

# Compute Taylor polynomials at x=0 (they are all zero)
def taylor_approx(x, n):
    return np.zeros_like(x)  # All derivatives at 0 are zero

# Set up x-values
x_vals = np.linspace(-1, 1, 400)
f_vals = f(x_vals)

# Plot the true function and several Taylor approximations
fig = plt.figure(figsize=(10, 6))
plt.plot(x_vals, f_vals, label='$f(x) = e^{-1/x^2}$ (extended by 0 at 0)', color='black')

colors = plt.cm.viridis(np.linspace(0, 1, 5))
for n, c in zip([1, 3, 5, 10, 20], colors):
    plt.plot(x_vals, taylor_approx(x_vals, n), linestyle='--', color=c, label=f'Taylor degree {n}')

plt.axvline(0, color='gray', linestyle='--', alpha=0.5)
plt.title('Smooth but Non-Analytic Function at $x = 0$')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.set_ylim([-0.1, 0.4])
plt.set_xlim([-1, 1])
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[2], line 32[0m
[1;32m     30[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124mx[39m[38;5;124m'[39m)
[1;32m     31[0m plt[38;5;241m.[39mylabel([38;5;124m'[39m[38;5;124mf(x)[39m[38;5;124m'[39m)
[0;32m---> 32[0m plt[38;5;241m.[39mset_ylim([[38;5;241m-[39m[38;5;241m0.1[39m, [38;5;241m0.4[39m])
[1;32m     33[0m plt[38;5;241m.[39mset_xlim([[38;5;241m-[39m[38;5;241m1[39m, [38;5;241m1[39m])
[1;32m     34[0m plt[38;5;241m.[39mlegend()

[0;31mAttributeError[0m: module 'matplotlib.pyplot' has no attribute 'set_ylim'

