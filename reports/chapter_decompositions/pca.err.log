Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
snpreader = Bed('./genetic_data/example2.bed', count_A1=True)
data = snpreader.read()
print(data.shape)
# y includes our labels and x includes our features
labels = pd.read_csv("./genetic_data/1kg_annotations_edit.txt", sep="\t", index_col="Sample")
list1 = data.iid[:,1].tolist()  #list with the Sample numbers present in genetic dataset
labels = labels[labels.index.isin(list1)]  #filter labels DataFrame so it only contains the sampleIDs present in genetic data
y = labels.SuperPopulation  # EUR, AFR, AMR, EAS, SAS
X = data.val[:, ~np.isnan(data.val).any(axis=0)]  #load genetic data to X, removing NaN values
pca = PCA()
pca.fit(X=X)

X_pc = pca.transform(X)
X_reconstruction_full = pca.reverse_transform(X_pc)
print("L1 reconstruction error for full PCA : %.4E " % (np.absolute(X - X_reconstruction_full).sum()))

for rank in range(5):    #more correct: X_pc.shape[1]+1
    pca_lowrank = PCA(k=rank)
    pca_lowrank.fit(X=X)
    X_lowrank = pca_lowrank.transform(X)
    X_reconstruction = pca_lowrank.reverse_transform(X_lowrank)
    print("L1 reconstruction error for rank %i PCA : %.4E " % (rank, np.absolute(X - X_reconstruction).sum()))

fig = plt.figure()
plt.plot(X_pc[y=="EUR"][:,0], X_pc[y=="EUR"][:,1],'.', alpha = 0.3)
plt.plot(X_pc[y=="AFR"][:,0], X_pc[y=="AFR"][:,1],'.', alpha = 0.3)
plt.plot(X_pc[y=="EAS"][:,0], X_pc[y=="EAS"][:,1],'.', alpha = 0.3)
plt.plot(X_pc[y=="AMR"][:,0], X_pc[y=="AMR"][:,1],'.', alpha = 0.3)
plt.plot(X_pc[y=="SAS"][:,0], X_pc[y=="SAS"][:,1],'.', alpha = 0.3)
plt.xlabel("PC 1")
plt.ylabel("PC 2")
plt.legend(["EUR", "AFR","EAS","AMR","SAS"])

fig2 = plt.figure()
plt.plot(X_pc[y=="EUR"][:,0], X_pc[y=="EUR"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="AFR"][:,0], X_pc[y=="AFR"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="EAS"][:,0], X_pc[y=="EAS"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="AMR"][:,0], X_pc[y=="AMR"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="SAS"][:,0], X_pc[y=="SAS"][:,2],'.', alpha = 0.3)
plt.xlabel("PC 1")
plt.ylabel("PC 3")
plt.legend(["EUR", "AFR","EAS","AMR","SAS"])


fig3 = plt.figure()
plt.plot(X_pc[y=="EUR"][:,1], X_pc[y=="EUR"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="AFR"][:,1], X_pc[y=="AFR"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="EAS"][:,1], X_pc[y=="EAS"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="AMR"][:,1], X_pc[y=="AMR"][:,2],'.', alpha = 0.3)
plt.plot(X_pc[y=="SAS"][:,1], X_pc[y=="SAS"][:,2],'.', alpha = 0.3)
plt.xlabel("PC 2")
plt.ylabel("PC 3")
plt.legend(["EUR", "AFR","EAS","AMR","SAS"])

fig4 = plt.figure()
plt.plot(pca.variance_explained())
plt.xlabel("PC dimension")
plt.ylabel("variance explained")

fig4 = plt.figure()
plt.plot(pca.variance_explained().cumsum() / pca.variance_explained().sum())
plt.xlabel("PC dimension")
plt.ylabel("cumulative fraction of variance explained")
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[4], line 2[0m
[1;32m      1[0m snpreader [38;5;241m=[39m Bed([38;5;124m'[39m[38;5;124m./genetic_data/example2.bed[39m[38;5;124m'[39m, count_A1[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m----> 2[0m data [38;5;241m=[39m snpreader[38;5;241m.[39mread()
[1;32m      3[0m [38;5;28mprint[39m(data[38;5;241m.[39mshape)
[1;32m      4[0m [38;5;66;03m# y includes our labels and x includes our features[39;00m

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pysnptools/snpreader/snpreader.py:489[0m, in [0;36mSnpReader.read[0;34m(self, order, dtype, force_python_only, view_ok, num_threads, _require_float32_64)[0m
[1;32m    434[0m [38;5;250m[39m[38;5;124;03m"""Reads the SNP values and returns a :class:`.SnpData` (with :attr:`.SnpData.val` property containing a new ndarray of the SNP values).[39;00m
[1;32m    435[0m 
[1;32m    436[0m [38;5;124;03m:param order: {'F' (default), 'C', 'A'}, optional -- Specify the order of the ndarray. If order is 'F' (default),[39;00m
[0;32m   (...)[0m
[1;32m    486[0m [38;5;124;03m>>> # print np.may_share_memory(subset_snpdata.val, subsub_snpdata.val) # Do the two ndarray's share memory? They could. Currently they won't.[39;00m
[1;32m    487[0m [38;5;124;03m"""[39;00m
[1;32m    488[0m dtype [38;5;241m=[39m np[38;5;241m.[39mdtype(dtype)
[0;32m--> 489[0m val [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_read(
[1;32m    490[0m     [38;5;28;01mNone[39;00m, [38;5;28;01mNone[39;00m, order, dtype, force_python_only, view_ok, num_threads
[1;32m    491[0m )
[1;32m    492[0m [38;5;28;01mfrom[39;00m [38;5;21;01mpysnptools[39;00m[38;5;21;01m.[39;00m[38;5;21;01msnpreader[39;00m [38;5;28;01mimport[39;00m SnpData
[1;32m    494[0m ret [38;5;241m=[39m SnpData(
[1;32m    495[0m     [38;5;28mself[39m[38;5;241m.[39miid,
[1;32m    496[0m     [38;5;28mself[39m[38;5;241m.[39msid,
[0;32m   (...)[0m
[1;32m    500[0m     _require_float32_64[38;5;241m=[39m_require_float32_64,
[1;32m    501[0m )

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pysnptools/snpreader/bed.py:323[0m, in [0;36mBed._read[0;34m(self, iid_index_or_none, sid_index_or_none, order, dtype, force_python_only, view_ok, num_threads)[0m
[1;32m    313[0m [38;5;28;01mdef[39;00m [38;5;21m_read[39m(
[1;32m    314[0m     [38;5;28mself[39m,
[1;32m    315[0m     iid_index_or_none,
[0;32m   (...)[0m
[1;32m    321[0m     num_threads,
[1;32m    322[0m ):
[0;32m--> 323[0m     [38;5;28mself[39m[38;5;241m.[39m_run_once()
[1;32m    325[0m     [38;5;28;01mif[39;00m order [38;5;241m==[39m [38;5;124m"[39m[38;5;124mA[39m[38;5;124m"[39m:
[1;32m    326[0m         order [38;5;241m=[39m [38;5;124m"[39m[38;5;124mF[39m[38;5;124m"[39m

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pysnptools/snpreader/bed.py:194[0m, in [0;36mBed._run_once[0;34m(self)[0m
[1;32m    191[0m     [38;5;28;01mreturn[39;00m
[1;32m    192[0m [38;5;28mself[39m[38;5;241m.[39m_ran_once [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[0;32m--> 194[0m [38;5;28mself[39m[38;5;241m.[39mrow
[1;32m    195[0m [38;5;28mself[39m[38;5;241m.[39mcol
[1;32m    196[0m [38;5;28mself[39m[38;5;241m.[39mcol_property

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pysnptools/snpreader/bed.py:151[0m, in [0;36mBed.row[0;34m(self)[0m
[1;32m    149[0m [38;5;250m[39m[38;5;124;03m"""*same as* :attr:`iid`"""[39;00m
[1;32m    150[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mhasattr[39m([38;5;28mself[39m, [38;5;124m"[39m[38;5;124m_row[39m[38;5;124m"[39m):
[0;32m--> 151[0m     [38;5;28mself[39m[38;5;241m.[39m_open_bed_if_needed()
[1;32m    153[0m     [38;5;28mself[39m[38;5;241m.[39m_row [38;5;241m=[39m np[38;5;241m.[39marray(
[1;32m    154[0m         [[38;5;28mself[39m[38;5;241m.[39m_open_bed[38;5;241m.[39mfid, [38;5;28mself[39m[38;5;241m.[39m_open_bed[38;5;241m.[39miid]
[1;32m    155[0m     )[38;5;241m.[39mT  [38;5;66;03m# LATER: could copy in batches or use concatenate[39;00m
[1;32m    157[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_row

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/pysnptools/snpreader/bed.py:137[0m, in [0;36mBed._open_bed_if_needed[0;34m(self)[0m
[1;32m    134[0m     properties[[38;5;124m"[39m[38;5;124mcm_position[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_original_pos[:, [38;5;241m1[39m]
[1;32m    135[0m     properties[[38;5;124m"[39m[38;5;124mbp_position[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_original_pos[:, [38;5;241m2[39m]
[0;32m--> 137[0m [38;5;28mself[39m[38;5;241m.[39m_open_bed [38;5;241m=[39m open_bed(
[1;32m    138[0m     [38;5;28mself[39m[38;5;241m.[39mfilename,
[1;32m    139[0m     properties[38;5;241m=[39mproperties,
[1;32m    140[0m     skip_format_check[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_skip_format_check,
[1;32m    141[0m     count_A1[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mcount_A1,
[1;32m    142[0m     num_threads[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_num_threads,
[1;32m    143[0m     fam_filepath[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mfam_filename,
[1;32m    144[0m     bim_filepath[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mbim_filename,
[1;32m    145[0m )

File [0;32m/opt/anaconda3/lib/python3.12/site-packages/bed_reader/_open_bed.py:306[0m, in [0;36mopen_bed.__init__[0;34m(self, location, iid_count, sid_count, properties, count_A1, num_threads, skip_format_check, fam_location, bim_location, cloud_options, max_concurrent_requests, max_chunk_bytes, filepath, fam_filepath, bim_filepath)[0m
[1;32m    304[0m     check_file_cloud([38;5;28mself[39m[38;5;241m.[39mlocation[38;5;241m.[39mgeturl(), [38;5;28mself[39m[38;5;241m.[39mcloud_options)
[1;32m    305[0m [38;5;28;01melse[39;00m:
[0;32m--> 306[0m     [38;5;28;01mwith[39;00m [38;5;28mopen[39m([38;5;28mself[39m[38;5;241m.[39mlocation, [38;5;124m"[39m[38;5;124mrb[39m[38;5;124m"[39m) [38;5;28;01mas[39;00m filepointer:
[1;32m    307[0m         [38;5;28mself[39m[38;5;241m.[39m_mode [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_check_file(filepointer)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'genetic_data/example2.bed'

